/config/User.xml 中, <del> 写Demo时候, #{}没写id ,看了有一会, 正确格式是 #{id}

#{}  ${} 及配置文件参数说明, 见config.User.xml 注释



动态代理实现Dao 步骤: 
1引用config/SqlMapConfig.xml 配置文件
2 cn.yydcyy.UserMapper.java 接口, 定义 findUserByUserName insertUser 等方法
3 cn.yydcyy.UserMapper.xml 配置文件, 实现代理映射文件编写 (sql语句, 底层实现)
4 cn.yydcyy.test.UserMapperTest.java 测试 Demo
说明 :第一步中, <mappers><mapper class="步骤二中的Usermapper.java">, 第三步UserMapper.xml 的namespace 为第二步UserMapper.java的全路径
第四步Test中, 只需factory实例化(加载SqlMapperConfig.xml),factory.openSession(). 动态代理实例化接口mapper, mapper.XXX方法调用   即为代替代理实现 Mapper思路及实现过程

SqlMapConfig.xml中引用mapper说明 :  可<package name>采用包扫描 / 具体引用 , 见注解说明
UserMapperTest.java 中, 所有方法都需要factory, 故 factory类中全局变量, 注解@Before方式提前流方式加载配置文件.xml,创建会话工厂

更具体步骤及说明, 见 MyBatis.doc 

注意.面试: 要么问具体属性,考察你用到过这里没.  要么问思路/ 设计思想 : 分层, 类间链接关系

pojo:不按mvc分层,只是java bean有一些属性,还有get set方法
domain:不按mvc分层,只是java bean有一些属性,还有get set方法
po:用在持久层,还可以再增加或者修改的时候,从页面直接传入action中,它里面的java bean 类名等于表名,
	属性名等于表的字段名,还有对应的get set方法
vo: view object表现层对象,主要用于在高级查询中从页面接收传过来的各种参数.好处是扩展性强
bo: 用在servie层,现在企业基本不用.
这些po,vo, bo,pojo可以用在各种层面吗
可以,也就是po用在表现层,vo用在持久层不报错,因为都是普通的java bean没有语法错误.
但是在企业最好不要混着用,因为这些都是设计的原则,混着用比较乱.不利于代码维护.

自学方法论: 理论 -> 实践 -> 理论 -> 实践  反复迭代三遍

总结:
1. mybatis是一个持久层框架, 作用是跟数据库交互完成增删改查
2.原生Dao实现(需要接口和实现类)
4.动态代理方式(只需要接口)
	mapper接口代理实现编写规则:
	1) 映射文件中namespace要等于接口的全路径名称
	2) 映射文件中sql语句id要等于接口的方法名称
	3) 映射文件中传入参数类型要等于接口方法的传入参数类型
	4) 映射文件中返回结果集类型要等于接口方法的返回值类型

5. #{}占位符:占位
	如果传入的是基本类型,那么#{}中的变量名称可以随意写
	如果传入的参数是pojo类型,那么#{}中的变量名称必须是pojo中的属性.属性.属性...

6. ${}拼接符:字符串原样拼接
	如果传入的是基本类型,那么${}中的变量名必须是value
	如果传入的参数是pojo类型,那么${}中的变量名称必须是pojo中的属性.属性.属性...
	注意:使用拼接符有可能造成sql注入,在页面输入的时候可以加入校验,不可输入sql关键字,不可输入空格
7. 映射文件:
	1)传入参数类型通过parameterType属性指定
	2)返回结果集类型通过resultType属性指定
8. hibernate和mybatis区别:
	hibernate:它是一个标准的orm框架,比较重量级,学习成本高.
		优点:高度封装,使用起来不用写sql,开发的时候,会减低开发周期.
		缺点:sql语句无法优化
		应用场景:oa(办公自动化系统), erp(企业的流程系统)等,还有一些政府项目,
			总的来说,在用于量不大,并发量小的时候使用.
	mybatis:它不是一个orm框架, 它是对jdbc的轻量级封装, 学习成本低,比较简单
		有点:学习成本低, sql语句可以优化, 执行效率高,速度快
		缺点:编码量较大,会拖慢开发周期
		应用场景: 互联网项目,比如电商,P2p等
		     总的来说是用户量较大,并发高的项目.